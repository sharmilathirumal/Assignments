The traditional methods JavaScript has available for running code asynchronously –
after a set time period elapsed or
at regular intervals of time
setTimeout()
setInterval()
--------------------------------------------------------------------------------------------------------------------------------
setTimeout()

The setTimeout() function executes a particular block of code once after a specified time has elapsed

setTimeout(function, duration, param1, param2, ...)


The first parameter is a function to run, or a reference to a function defined elsewhere

The second parameter is a number representing the duration in milliseconds to wait before executing the code

After the second parameter, you can pass in zero or more values that represent any parameters you want to pass to the function when it is run

Example 1
function greet() {
  console.log('Hello')
}

setTimeout(greet, 2000)
// -> Logs 'Hello' to the console after 2 seconds

Example 2
function greet(name) {
  console.log(`Hello ${name}`)
}

setTimeout(greet, 2000, 'Vishwas')
// -> Logs 'Hello Vishwas' to the console after 2 seconds
---------------------------------------------------------------------------------------------------------------------------------
setTimeout()

To clear a timeout, you can use the clearTimeout() method, passing in the identifier returned by setTimeout as a parameter

function greet() {
  console.log('Hello')
}

const timeoutId = setTimeout(greet, 2000, 'Vishwas')
clearTimeout(timeoutId)
// -> Nothing is logged to the console


A more practical scenario is clearing timeouts when the component is unmounting to free up resources and also prevent code from incorrectly executing on an unmounted component.
----------------------------------------------------------------------------------------------------------------------------------
setInterval()

Definition:
The setInterval() function repeatedly executes a block of code at fixed time intervals until it is stopped (with clearInterval()).

Syntax:
setInterval(function, duration, param1, param2, ...);

function → the callback function to run

duration → time in milliseconds (1000 ms = 1 sec) between each execution

param1, param2… → optional arguments passed to the function when it runs

 function greet() {
  console.log("Hello");
}

setInterval(greet, 2000);

  Hello
Hello
Hello
... (every 2 seconds forever)
Important detail

Like setTimeout, setInterval also hands the timer task to the Web API (not the main thread).
When the interval expires, the callback is pushed into the callback queue, and the event loop picks it up when the call stack is free.

⚠️ Note: If your main thread is busy (e.g., a heavy loop), the interval won’t fire exactly on time — it will wait until the thread is free.

==>interval keep running a task forever so you should clear the interval when appropiate

ex:
const intervalId = setInterval(greet,2000,'sharmi')
clearInterval(intervalId);

Note: set interval and set timeout are not part of JavaScript itself. they are implemented by browser.